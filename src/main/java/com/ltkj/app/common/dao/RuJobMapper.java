package com.ltkj.app.common.dao;

import com.ltkj.app.common.model.RuJob;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

public interface RuJobMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table act_ru_job
     *
     * @mbggenerated
     */
    @Delete({
        "delete from act_ru_job",
        "where ID_ = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table act_ru_job
     *
     * @mbggenerated
     */
    @Insert({
        "insert into act_ru_job (ID_, REV_, ",
        "TYPE_, LOCK_EXP_TIME_, ",
        "LOCK_OWNER_, EXCLUSIVE_, ",
        "EXECUTION_ID_, PROCESS_INSTANCE_ID_, ",
        "PROC_DEF_ID_, RETRIES_, ",
        "EXCEPTION_STACK_ID_, EXCEPTION_MSG_, ",
        "DUEDATE_, REPEAT_, ",
        "HANDLER_TYPE_, HANDLER_CFG_, ",
        "TENANT_ID_)",
        "values (#{id,jdbcType=VARCHAR}, #{rev,jdbcType=INTEGER}, ",
        "#{type,jdbcType=VARCHAR}, #{lockExpTime,jdbcType=TIMESTAMP}, ",
        "#{lockOwner,jdbcType=VARCHAR}, #{exclusive,jdbcType=BIT}, ",
        "#{executionId,jdbcType=VARCHAR}, #{processInstanceId,jdbcType=VARCHAR}, ",
        "#{procDefId,jdbcType=VARCHAR}, #{retries,jdbcType=INTEGER}, ",
        "#{exceptionStackId,jdbcType=VARCHAR}, #{exceptionMsg,jdbcType=VARCHAR}, ",
        "#{duedate,jdbcType=TIMESTAMP}, #{repeat,jdbcType=VARCHAR}, ",
        "#{handlerType,jdbcType=VARCHAR}, #{handlerCfg,jdbcType=VARCHAR}, ",
        "#{tenantId,jdbcType=VARCHAR})"
    })
    int insert(RuJob record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table act_ru_job
     *
     * @mbggenerated
     */
    int insertSelective(RuJob record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table act_ru_job
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "ID_, REV_, TYPE_, LOCK_EXP_TIME_, LOCK_OWNER_, EXCLUSIVE_, EXECUTION_ID_, PROCESS_INSTANCE_ID_, ",
        "PROC_DEF_ID_, RETRIES_, EXCEPTION_STACK_ID_, EXCEPTION_MSG_, DUEDATE_, REPEAT_, ",
        "HANDLER_TYPE_, HANDLER_CFG_, TENANT_ID_",
        "from act_ru_job",
        "where ID_ = #{id,jdbcType=VARCHAR}"
    })
    @ResultMap("BaseResultMap")
    RuJob selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table act_ru_job
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(RuJob record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table act_ru_job
     *
     * @mbggenerated
     */
    @Update({
        "update act_ru_job",
        "set REV_ = #{rev,jdbcType=INTEGER},",
          "TYPE_ = #{type,jdbcType=VARCHAR},",
          "LOCK_EXP_TIME_ = #{lockExpTime,jdbcType=TIMESTAMP},",
          "LOCK_OWNER_ = #{lockOwner,jdbcType=VARCHAR},",
          "EXCLUSIVE_ = #{exclusive,jdbcType=BIT},",
          "EXECUTION_ID_ = #{executionId,jdbcType=VARCHAR},",
          "PROCESS_INSTANCE_ID_ = #{processInstanceId,jdbcType=VARCHAR},",
          "PROC_DEF_ID_ = #{procDefId,jdbcType=VARCHAR},",
          "RETRIES_ = #{retries,jdbcType=INTEGER},",
          "EXCEPTION_STACK_ID_ = #{exceptionStackId,jdbcType=VARCHAR},",
          "EXCEPTION_MSG_ = #{exceptionMsg,jdbcType=VARCHAR},",
          "DUEDATE_ = #{duedate,jdbcType=TIMESTAMP},",
          "REPEAT_ = #{repeat,jdbcType=VARCHAR},",
          "HANDLER_TYPE_ = #{handlerType,jdbcType=VARCHAR},",
          "HANDLER_CFG_ = #{handlerCfg,jdbcType=VARCHAR},",
          "TENANT_ID_ = #{tenantId,jdbcType=VARCHAR}",
        "where ID_ = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(RuJob record);
}