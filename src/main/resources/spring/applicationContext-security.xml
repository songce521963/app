<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
		
		<beans:bean id="customWebInvocationPrivilegeEvaluator" class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator">  
        	<beans:constructor-arg name="securityInterceptor" ref="mySecurityFilter" />  
   		</beans:bean>
   		
   		<!-- <http pattern="/**/iframe/*" securit  y="none"/> -->
	    <http pattern="/account/login/*" security="none" />
	    <http pattern="/account/register/*" security="none" />
	    <http pattern="/error/*" security="none" />
	    <http pattern="/resources/**" security="none"/>
    
		<http auto-config="true" use-expressions="true" entry-point-ref="authenticationEntryPoint"> 
			<headers>
				<!-- can use iframe in html-->
				<frame-options policy="SAMEORIGIN"/>
			</headers>
			<!-- 没有权限时异常处理 -->
			<access-denied-handler ref="accessDeniedHandler"/>
			<!-- 登出管理
		        logout-url 属性:这个指定的URL会触发注销操作，默认是 /j_spring_security_logout
		        invalidate-session 属性：如果为true，在注销的时候会销毁会话
		        delete-cookies 属性：以逗号分隔的cookies名称，在用户注销时删除指定的cookies-->
			<logout 
				logout-success-url='/account/login/show.html' 
				logout-url='/logout'
				invalidate-session="true"  
				delete-cookies="JSESSIONID"/>
			
	        <!-- session超时跳转页面 以及每用户可拥有的session最大个数 
	        	  如果每次退出后，必须要求用户必须重开浏览器才能登录，可以将 invalid-session-url="/logout.jsp"，
	        	  防止有些 Web 应用把用户的会话标识符直接通过 URL 的参数来传递        -->
	        <!-- 会话管理 --> 
			<session-management invalid-session-url="/account/login/show.html">
         		<concurrency-control max-sessions="1"/>
        	</session-management>
			
			<!--  Spring Sercurity要从数据库中获取用户、权限、资源来实现权限管理，需要自定义过滤器，
				     并且该过滤器必须在spring Security执行FILTER_SECURITY_INTERCEPTOR过滤器之前执行，
				    因为该框架实现权限管理实质就是在执行action之前先执行它框架中的为权限管理制定的一系列Fliter。
				　我们自定的这个SercurityFilter类要继承AbstractSecurityInterceptor 接口和Filter类（负责传递一系列的Filter）,
				　因为我们是从数据库中获取权限验证的数据，所以还要重写FilterInvocationSecurityMetadataSource 接口，
				 AccessDecisionManager 接口，UserDetailsService 接口，只要重写了这3个接口，
				   然后再spring配置文件中做相应的配置，项目启动启动后，我们进行资源请求，就自动会去执行我们重定义的类进行权限判断。-->
	        <custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
	        <custom-filter ref="sessionTimeOutFilter" after="CONCURRENT_SESSION_FILTER"/>
		</http>
		
		<!-- 启用注解 实现方法验证 -->
		<global-method-security jsr250-annotations="enabled"/>
		
		<!-- 未登录的切入点 -->
	    <beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
	        <beans:constructor-arg name="loginFormUrl" value="/account/login/show.html" />
	    </beans:bean> 
    
    	<!-- BCrypt算法加密存 -->
    	<beans:bean name="bcryptEncoder"
			class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

		<!-- 获取用户权限信息 -->
		<authentication-manager alias="myAuthenticationManager">
			<authentication-provider user-service-ref='myUserDetailServiceImpl'>
				<password-encoder ref="bcryptEncoder"/>
			</authentication-provider>
		</authentication-manager>
		
		<!-- 没有权限处理 -->
		<beans:bean id="accessDeniedHandler" class="com.ltkj.core.security.holder.AccessDeniedHandlerImpl"></beans:bean>
		
		<!-- 安全资源白名单(URL) -->  
	    <beans:bean id="securityMetadataSourceTrustListHolder"   
	        class="com.ltkj.core.security.holder.SecurityMetadataSourceTrustListHolder" >  
	        <beans:property name="trustList">  
	            <beans:list>  
	                <beans:value>/account/index/show.html</beans:value>  
	            </beans:list>  
	        </beans:property>  
	    </beans:bean>  
	      
	    <!-- 安全用户白名单 -->  
	    <beans:bean id="securityUserTrustListHolder"   
	        class="com.ltkj.core.security.holder.SecurityUserTrustListHolder" >  
	        <beans:property name="trustList">  
	            <beans:list>  
	                <beans:value>system</beans:value>  
	            </beans:list>  
	        </beans:property>  
	    </beans:bean>  
        
</beans:beans>